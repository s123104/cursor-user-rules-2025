---
description: "程式碼品質保證規範 - 確保高標準的程式碼品質"
type: "Agent Requested"
pattern: "**/*.{js,ts,jsx,tsx,py,go,java,cpp,c,rs,php,rb,kt}"
version: "2.0.1"
author: "品質保證委員會"
last_updated: "2025-06-16T11:22:50+08:00"
enforcement_level: "mandatory"
applies_to: ["pre-commit", "code-review", "ci-pipeline"]
---

# 程式碼品質保證規範

本規範建立了確保程式碼品質的詳細標準和自動化檢查機制，旨在預防技術債務累積並提升系統的長期可維護性。

## 靜態程式碼分析要求

### Linting 配置標準

所有專案必須配置並執行適當的linting工具。JavaScript/TypeScript專案使用ESLint配合TypeScript ESLint規則集，Python專案使用flake8、black和isort組合，Go專案使用golangci-lint，Java專案使用SpotBugs和PMD。

Linting配置必須包含以下規則類別：程式碼風格一致性檢查、潛在錯誤識別、安全性漏洞檢測、效能問題警告、可維護性指標評估。所有linting錯誤必須在程式碼提交前修復，警告數量不得超過新增程式碼行數的5%。

### 程式碼複雜度監控

實施自動化的程式碼複雜度監控機制，包含循環複雜度、認知複雜度和巢狀深度分析。函數的循環複雜度閾值設定為10，認知複雜度閾值設定為15，巢狀深度不得超過4層。

類別的複雜度監控包含方法數量（不超過20個公開方法）、繼承深度（不超過5層）和耦合度分析（扇入扇出比例控制）。

### 重複程式碼檢測

使用自動化工具檢測程式碼重複，整體重複率不得超過3%。檢測範圍包含完全重複、結構重複和邏輯重複。發現的重複程式碼必須通過抽取共用函數、建立共用模組或實施設計模式進行消除。

## 程式碼審查標準

### 審查清單要求

每次程式碼審查必須遵循標準化清單，包含功能正確性驗證、邊界條件處理、錯誤處理完整性、效能影響評估、安全性風險評估、可讀性和可維護性評估。

審查者必須驗證程式碼是否遵循SOLID原則、DRY原則和KISS原則。特別關注單一職責原則的實施、開放封閉原則的遵循、依賴注入的正確使用。

### 審查流程規範

所有程式碼變更必須經過至少一名資深開發者的審查，關鍵系統組件的變更需要兩名審查者的批准。審查者必須實際運行程式碼、檢查測試覆蓋率、驗證文檔完整性。

審查意見必須具體且可操作，包含問題描述、改善建議和範例程式碼。審查過程必須記錄決策理由，特別是對於架構決策和技術選型。

## 自動化品質閘門

### 持續整合檢查

CI管道必須包含以下強制檢查步驟：程式碼格式化驗證、靜態分析執行、單元測試運行、整合測試執行、安全性掃描、效能回歸測試。

每個檢查步驟都設有明確的通過標準，任何檢查失敗都將阻止程式碼合併。品質閘門的配置必須版本化管理，變更需要經過架構委員會批准。

### 覆蓋率門檻控制

測試覆蓋率門檻根據程式碼類型差異化設定：核心業務邏輯要求90%覆蓋率，一般業務功能要求80%覆蓋率，工具函數要求85%覆蓋率，UI組件要求75%覆蓋率。

覆蓋率計算包含行覆蓋率、分支覆蓋率和函數覆蓋率。使用mutation testing驗證測試品質，mutation score必須達到70%以上。

## 效能品質標準

### 響應時間要求

API端點的響應時間要求根據操作類型分類：查詢操作P95響應時間不超過100ms，創建操作不超過200ms，更新操作不超過150ms，刪除操作不超過100ms，批量操作不超過500ms。

前端組件的渲染時間要求：初始渲染不超過100ms，狀態更新渲染不超過50ms，複雜交互響應不超過200ms。

### 資源使用監控

記憶體使用監控包含記憶體洩漏檢測、記憶體分配模式分析、垃圾回收影響評估。單一功能的記憶體使用增長不得超過分配量的10%。

CPU使用率監控要求正常負載下不超過70%，峰值負載下不超過90%。資料庫查詢必須進行效能分析，避免N+1查詢問題和全表掃描。

## 可維護性指標

### 可讀性評估

程式碼可讀性評估包含命名清晰度、函數長度合理性、註解適當性、結構邏輯性。使用自動化工具計算可讀性分數，目標分數為80分以上。

函數和類別的命名必須能夠清楚表達其用途，避免使用縮寫和技術行話。註解應該解釋"為什麼"而非"是什麼"，複雜演算法必須提供演算法說明和時間複雜度分析。

### 模組化程度

評估模組間的耦合度和內聚性，模組間的依賴關係必須清晰且最小化。使用依賴圖分析工具檢測循環依賴，所有循環依賴必須重構消除。

介面設計必須遵循介面隔離原則，避免胖介面。模組的公開介面必須穩定，內部實作可以靈活變更。

## 技術債務追蹤

### 債務分類管理

技術債務按照類型分類管理：程式碼債務（重複程式碼、複雜度過高）、設計債務（架構缺陷、設計模式濫用）、測試債務（覆蓋率不足、測試品質低）、文檔債務（文檔缺失、內容過時）。

每類債務設定量化指標和改善目標，建立債務趨勢監控和定期評估機制。債務總量不得超過總開發工作量的15%。

### 債務還款計劃

制定明確的技術債務還款計劃，將債務還款工作納入Sprint規劃。高風險債務必須優先處理，低風險債務可以與新功能開發並行進行。

債務還款進度必須可追蹤和可衡量，包含還款完成率、債務減少量、品質改善指標。每個Sprint必須分配至少20%的時間用於債務還款。

## 品質度量和報告

### 度量指標體系

建立comprehensive的品質度量指標體系，包含程式碼品質指標（複雜度、重複率、覆蓋率）、流程品質指標（審查通過率、修復時間、部署成功率）、產品品質指標（缺陷率、效能指標、用戶滿意度）。

所有指標必須自動收集和定期報告，建立趨勢分析和異常警報機制。指標數據用於持續改善流程和技術決策支援。

### 品質報告機制

生成定期品質報告，包含週報、月報和季度報告。報告內容涵蓋品質趨勢分析、問題識別、改善建議、最佳實踐分享。

報告對象包含開發團隊、項目經理、架構師和高級管理層，不同對象的報告內容和詳細程度有所差異。

---

本規範的實施將通過自動化工具和人工審查相結合的方式進行監控，確保所有程式碼都達到高品質標準並持續改善。
