---
description: "效能標準規範 - 系統效能優化和監控要求"
type: "Auto Attached"
pattern: "**/*.{js,ts,jsx,tsx,py,go,java,cpp,c,rs,php,rb,kt,sql}"
version: "2.0.1"
author: "效能工程委員會"
last_updated: "2025-06-16T11:22:50+08:00"
enforcement_level: "mandatory"
performance_budgets: true
---

# 效能標準規範

本規範建立了comprehensive的系統效能標準，涵蓋前端、後端、資料庫和基礎設施的效能要求，確保系統具備優秀的用戶體驗和可擴展性。

## 效能設計原則

### 效能優先設計

效能考量必須從系統設計階段開始，而非事後優化。所有架構決策都必須評估其效能影響，包含演算法選擇、資料結構設計、API設計、資料庫schema設計。

實施效能預算機制，為每個功能模組設定明確的效能目標。新功能開發必須在效能預算範圍內，超出預算的功能需要額外的效能優化工作。

### 可擴展性架構

系統設計必須支援水平擴展和垂直擴展，避免單點瓶頸。實施無狀態設計原則，確保應用程式實例可以任意擴展。使用適當的負載均衡策略分散請求負載。

資料庫設計必須考慮分片和讀寫分離策略。實施適當的快取層次，包含應用程式快取、資料庫快取、CDN快取。設計非同步處理機制處理耗時操作。

## 前端效能標準

### Core Web Vitals要求

所有網頁必須達到Core Web Vitals的"Good"評級標準：Largest Contentful Paint (LCP) ≤ 2.5秒、First Input Delay (FID) ≤ 100毫秒、Cumulative Layout Shift (CLS) ≤ 0.1。

實施持續的效能監控，使用Real User Monitoring (RUM)收集真實用戶的效能數據。建立效能基線和回歸檢測機制，確保效能不會因新功能而退化。

### 資源優化要求

JavaScript bundle大小限制：初始載入bundle ≤ 150KB gzipped，動態載入chunk ≤ 100KB gzipped。CSS檔案大小限制：≤ 50KB gzipped。圖片優化要求：使用現代格式（WebP、AVIF），實施響應式圖片和懶載入。

實施程式碼分割策略，按路由或功能分割程式碼。使用Tree Shaking移除未使用的程式碼。實施critical CSS內聯和非關鍵CSS延遲載入。使用適當的快取策略，包含HTTP快取標頭和Service Worker。

### 運行時效能優化

React應用必須避免不必要的重新渲染，正確使用useMemo、useCallback、React.memo。Vue應用必須合理使用computed和watch，避免複雜的模板表達式。

避免在主執行緒進行重CPU運算，使用Web Workers處理複雜計算。實施虛擬滾動處理大型列表。使用intersection Observer API優化滾動效能。實施適當的錯誤邊界防止組件崩潰影響整體效能。

## 後端效能標準

### API回應時間要求

API端點回應時間要求：查詢操作P95 ≤ 100毫秒、創建操作P95 ≤ 200毫秒、更新操作P95 ≤ 150毫秒、刪除操作P95 ≤ 100毫秒、複雜查詢P95 ≤ 500毫秒、批量操作P95 ≤ 1秒。

實施API效能監控，追蹤回應時間、吞吐量、錯誤率。建立效能警報機制，當效能指標超出閾值時及時通知。實施效能分析，識別緩慢的API端點和瓶頸。

### 並發處理能力

系統必須能夠處理預期的並發負載，目標並發請求數：普通API ≥ 1000 RPS、高頻API ≥ 5000 RPS、批量處理API ≥ 100 RPS。實施適當的執行緒池和連接池配置。

使用非同步程式設計模式處理I/O密集操作。實施背景任務佇列處理耗時操作。使用適當的限流和熔斷機制保護系統穩定性。實施優雅的降級策略。

### 記憶體使用優化

應用程式記憶體使用要求：正常負載下 ≤ 分配記憶體的70%、峰值負載下 ≤ 分配記憶體的90%。實施記憶體洩漏檢測和預防機制。

使用適當的資料結構減少記憶體佔用。實施物件池化重用昂貴物件。避免在記憶體中快取大量資料，使用外部快取服務。實施適當的垃圾回收調優。

## 資料庫效能標準

### 查詢效能要求

資料庫查詢效能要求：簡單查詢P95 ≤ 50毫秒、複雜查詢P95 ≤ 200毫秒、報表查詢P95 ≤ 2秒、批量操作P95 ≤ 5秒。實施查詢效能監控和分析。

所有查詢必須使用適當的索引，避免全表掃描。實施查詢計劃分析，識別效能瓶頸。使用適當的資料庫分片策略。實施讀寫分離減輕主資料庫負載。

### 索引策略

建立合理的索引策略，包含主鍵索引、外鍵索引、查詢索引、組合索引。避免過度索引影響寫入效能。定期分析索引使用情況，移除無用索引。

實施索引維護策略，包含索引重建、統計資訊更新。監控索引碎片化程度，及時進行碎片整理。實施分割槽索引策略處理大型表格。

### 連接池管理

實施適當的資料庫連接池配置，包含最小連接數、最大連接數、連接超時、空閒超時。監控連接池使用情況，避免連接洩漏。

實施連接池監控和警報機制。使用適當的連接池實作，如HikariCP、c3p0。實施連接健康檢查機制。配置適當的連接重試策略。

## 快取策略實施

### 多層快取架構

實施多層快取架構：瀏覽器快取（HTTP headers）、CDN快取（靜態資源）、應用程式快取（Redis/Memcached）、資料庫快取（query cache）。每層快取都有明確的職責和TTL設定。

實施快取一致性機制，確保資料更新時快取的及時失效。使用適當的快取淘汰策略，如LRU、LFU。實施快取命中率監控，目標命中率≥90%。

### 快取最佳實踐

實施快取鍵命名規範，確保鍵的唯一性和可讀性。使用適當的序列化格式，平衡效能和儲存空間。實施快取預熱機制，避免冷啟動效能問題。

實施快取監控和分析，包含命中率、延遲、記憶體使用。建立快取失效策略，包含TTL、手動失效、標籤失效。實施快取備份和恢復機制。

## 網路效能優化

### HTTP協議優化

使用HTTP/2或HTTP/3協議，支援多路復用和伺服器推送。實施適當的HTTP快取策略，包含強快取和協商快取。使用Gzip或Brotli壓縮減少傳輸大小。

實施Keep-Alive連接重用。使用適當的HTTP標頭優化，包含Cache-Control、ETag、Last-Modified。實施HSTS安全標頭。使用預載入技術優化關鍵資源載入。

### CDN配置優化

使用全球CDN服務加速靜態資源分發。實施智能DNS解析，將用戶導向最近的CDN節點。配置適當的CDN快取策略和TTL。

實施CDN效能監控，包含回源率、命中率、延遲。使用CDN的邊緣運算功能優化動態內容。實施CDN故障轉移機制。

## 監控和分析

### 效能監控體系

建立comprehensive的效能監控體系，包含Application Performance Monitoring (APM)、Real User Monitoring (RUM)、Synthetic Monitoring。監控關鍵效能指標包含回應時間、吞吐量、錯誤率、資源使用率。

實施效能基線建立和趨勢分析。建立效能警報機制，包含閾值警報、異常檢測警報。實施效能報告機制，定期生成效能分析報告。

### 效能分析工具

使用適當的效能分析工具：前端效能分析（Lighthouse、WebPageTest）、後端效能分析（APM工具、profiling工具）、資料庫效能分析（查詢分析器、慢查詢日誌）。

實施分散式追蹤系統，追蹤請求在微服務間的流轉。使用效能分析工具識別熱點程式碼和瓶頸。實施A/B測試驗證效能優化效果。

### 效能回歸檢測

實施自動化的效能回歸檢測，在CI/CD管道中執行效能測試。建立效能基線和變更檢測機制。當效能回歸超過閾值時阻止部署。

使用負載測試工具進行定期效能測試，包含JMeter、K6、Artillery。實施效能測試環境，模擬生產環境負載。建立效能測試案例覆蓋關鍵業務場景。

## 效能優化流程

### 效能預算管理

為每個功能模組建立效能預算，包含載入時間預算、資源大小預算、API回應時間預算。在功能開發過程中持續監控效能預算使用情況。

實施效能預算警報機制，當預算即將超支時及時通知。建立效能預算檢視機制，在程式碼審查階段評估效能影響。實施效能預算調整流程。

### 效能優化週期

建立定期的效能優化週期，包含效能評估、瓶頸識別、優化實施、效果驗證。優先處理影響用戶體驗的效能問題。實施效能優化的ROI評估。

建立效能優化知識庫，記錄常見效能問題和解決方案。實施效能最佳實踐培訓，提升團隊效能意識。建立效能優化的度量和獎勵機制。

---

本效能規範的實施將確保系統具備優秀的效能特性和用戶體驗。所有開發人員都有責任在日常開發中考慮效能影響並持續優化系統效能。
