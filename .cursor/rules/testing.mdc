---
description: "測試標準規範 - comprehensive測試策略和品質保證"
type: "Auto Attached"
pattern: "**/*.{test.js,test.ts,spec.js,spec.ts,test.py,_test.go,Test.java,test.cpp,test.rs}"
version: "2.0.1"
author: "測試工程委員會"
last_updated: "2025-06-16T11:22:50+08:00"
enforcement_level: "mandatory"
test_pyramid_compliance: true
---

# 測試標準規範

本規範建立了comprehensive的測試標準，實施測試金字塔原則，確保高品質的測試覆蓋和有效的缺陷預防機制，以支援可持續的軟體開發流程。

## 測試策略框架

### 測試金字塔實施

遵循測試金字塔原則，建立平衡的測試組合：單元測試佔70%、整合測試佔20%、端到端測試佔10%。這種比例確保快速的回饋循環、高效的缺陷檢測和可維護的測試套件。

單元測試專注於個別函數和類別的邏輯驗證，執行速度快且相互獨立。整合測試驗證組件間的協作行為，包含API整合、資料庫操作、外部服務通信。端到端測試模擬真實用戶場景，驗證完整的業務流程。

### 測試分層架構

建立清晰的測試分層架構，每層都有明確的責任和範圍：

**單元測試層**：測試個別函數、方法和類別的行為，使用mock和stub隔離外部依賴，確保測試的穩定性和速度。

**整合測試層**：測試模組間的交互，包含資料庫整合、API整合、檔案系統操作，使用test containers或嵌入式資料庫確保測試環境一致性。

**契約測試層**：驗證服務間的介面契約，使用工具如Pact或OpenAPI規範確保API的向後相容性。

**端到端測試層**：測試完整的用戶旅程，使用真實或接近真實的環境，驗證系統的整體功能和效能。

## 單元測試標準

### 測試覆蓋率要求

單元測試覆蓋率要求根據程式碼重要性分級：關鍵業務邏輯要求90%覆蓋率，一般業務功能要求80%覆蓋率，工具函數要求85%覆蓋率，配置和常數要求60%覆蓋率。

覆蓋率統計包含行覆蓋率、分支覆蓋率、函數覆蓋率和條件覆蓋率。使用mutation testing評估測試品質，mutation score目標為70%以上，確保測試能夠有效檢測程式碼變更。

### 測試設計原則

每個測試必須遵循AAA模式（Arrange, Act, Assert）或Given-When-Then模式，確保測試結構清晰。測試名稱必須描述測試場景和預期結果，格式為"should_[expected_behavior]_when_[condition]"。

測試必須具備FIRST特性：Fast（快速執行）、Independent（獨立運行）、Repeatable（可重複）、Self-Validating（自我驗證）、Timely（及時撰寫）。單一測試只驗證一個行為，避免複雜的測試邏輯。

### Mock和Stub使用

正確使用mock和stub隔離外部依賴，包含資料庫連接、網路呼叫、檔案系統操作、時間相關函數。Mock物件必須驗證交互行為，stub物件提供預定義的回應。

避免過度mocking導致測試與實作緊密耦合。對於簡單的值物件和純函數，直接使用真實物件。Mock的設定必須反映真實的業務邏輯和錯誤情況。

## 整合測試實作

### 資料庫整合測試

資料庫整合測試使用專用的測試資料庫或容器化資料庫，確保測試環境的一致性和隔離性。每個測試執行前建立乾淨的資料狀態，測試後清理產生的資料。

測試資料使用工廠模式或builder模式建立，確保資料的完整性和合理性。驗證資料庫操作的正確性，包含資料插入、更新、刪除、查詢邏輯。測試資料庫約束、觸發器、儲存程序的行為。

### API整合測試

API整合測試驗證HTTP端點的行為，包含請求參數驗證、回應格式檢查、狀態碼驗證、錯誤處理。使用contract testing確保API的向後相容性。

測試認證和授權機制，驗證不同權限級別的存取控制。測試API的效能特性，包含回應時間、並發處理能力、限流機制。使用OpenAPI規範驗證API文檔的準確性。

### 外部服務整合

外部服務整合測試使用服務虛擬化或API mocking工具，模擬外部服務的各種回應情況。測試網路錯誤、超時、服務不可用等異常情況的處理。

建立外部服務的健康檢查機制，確保服務依賴的可用性。實施熔斷器模式，測試服務降級和恢復邏輯。記錄外部服務的SLA要求，建立相應的監控和警報。

## 端到端測試策略

### 用戶旅程測試

端到端測試專注於關鍵的用戶旅程，包含用戶註冊、登入、核心業務流程、支付處理、資料匯出等。測試案例基於真實的用戶需求和使用場景設計。

使用頁面物件模式（Page Object Model）組織測試程式碼，提高測試的可維護性和可重用性。實施資料驅動測試，使用不同的測試資料驗證系統行為。

### 跨瀏覽器測試

在多個瀏覽器和裝置上執行端到端測試，包含Chrome、Firefox、Safari、Edge的最新版本。測試響應式設計在不同螢幕尺寸下的行為。

使用雲端測試平台或容器化的瀏覽器環境，確保測試環境的一致性。實施visual regression testing檢測UI變更，使用截圖比較識別視覺差異。

### 效能和可靠性測試

整合效能測試到端到端測試流程，監控頁面載入時間、交互響應時間、資源使用量。設定效能基線和閾值，檢測效能回歸。

實施可靠性測試，包含網路延遲模擬、服務間歇性失敗、資料量壓力測試。驗證系統在異常條件下的行為，確保優雅的錯誤處理和恢復機制。

## 測試自動化實作

### 持續整合集成

所有測試必須整合到CI/CD管道中，程式碼提交觸發自動化測試執行。建立測試並行執行機制，減少整體執行時間。實施智能測試選擇，根據程式碼變更執行相關測試。

測試失敗必須阻止程式碼部署，建立快速失敗機制。提供詳細的測試報告和失敗分析，包含錯誤訊息、堆疊追蹤、測試日誌。實施測試結果通知機制。

### 測試環境管理

建立專用的測試環境，與開發和生產環境隔離。使用基礎設施即程式碼（IaC）管理測試環境，確保環境配置的版本化和可重現性。

實施測試資料管理策略，包含測試資料生成、資料遮罩、資料重置。建立測試環境的生命週期管理，包含環境建立、維護、銷毀。

### 測試報告和分析

建立comprehensive的測試報告機制，包含測試覆蓋率報告、測試執行報告、缺陷分析報告。使用測試度量追蹤測試品質趨勢，包含通過率、執行時間、維護成本。

實施測試失敗分析，分類測試失敗原因（程式碼缺陷、測試問題、環境問題）。建立測試債務追蹤，識別和修復脆弱的測試、緩慢的測試、重複的測試。

## 特殊類型測試

### 安全性測試

整合安全性測試到開發流程，包含靜態安全分析（SAST）、動態安全分析（DAST）、依賴性安全掃描。實施自動化的滲透測試，檢測常見的安全漏洞。

測試認證和授權機制，驗證存取控制的正確性。測試輸入驗證和輸出編碼，防止注入攻擊。實施安全配置測試，確保系統配置符合安全最佳實踐。

### 可用性測試

實施自動化的可用性測試，包含載入測試、壓力測試、容量測試。模擬真實的用戶負載模式，識別系統瓶頸和擴展限制。

測試系統在高負載下的行為，驗證自動擴展機制和降級策略。實施混沌工程測試，驗證系統在元件失效情況下的韌性。

### 相容性測試

測試系統與不同版本的依賴項的相容性，包含資料庫版本、作業系統版本、瀏覽器版本。實施向後相容性測試，確保系統升級不影響現有功能。

測試API版本相容性，驗證客戶端和伺服器版本間的互操作性。實施資料遷移測試，確保資料結構變更的正確性和完整性。

## 測試品質保證

### 測試程式碼品質

測試程式碼必須遵循與生產程式碼相同的品質標準，包含程式碼風格、複雜度控制、文檔化要求。實施測試程式碼的程式碼審查，確保測試邏輯的正確性。

避免測試中的重複程式碼，使用共用的測試工具和輔助函數。測試程式碼必須易於理解和維護，具備清晰的註解和文檔。

### 測試維護策略

建立測試維護流程，包含失敗測試的修復、過時測試的移除、新需求的測試覆蓋。實施測試重構，改善測試的可讀性和可維護性。

定期評估測試套件的效能和價值，移除低價值的測試，優化執行時間過長的測試。建立測試知識管理，分享測試最佳實踐和經驗教訓。

---

本測試規範的實施將確保軟體品質的持續改善和可靠的產品交付。所有開發人員都有責任撰寫高品質的測試程式碼並維護測試套件的有效性。
