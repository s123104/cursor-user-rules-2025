---
description: "基礎開發規範 - 所有專案必須遵循的核心標準"
type: "Auto Attached"
pattern: "**/*.{js,ts,jsx,tsx,py,go,java,cpp,c,rs,php,rb,kt}"
version: "2.0.1"
author: "架構治理委員會"
last_updated: "2025-06-16T11:22:50+08:00"
enforcement_level: "mandatory"
---

# 基礎開發規範

此規範建立了所有程式碼必須達到的最低品質標準，以確保系統的長期可維護性和技術債務的有效控制。

## 程式碼品質核心要求

### 型別安全實施標準

所有新開發的程式碼必須實施嚴格的型別安全機制。TypeScript專案必須啟用嚴格模式配置，包含noImplicitAny、strictNullChecks和strictFunctionTypes選項。Python專案必須為所有函數和類別方法提供完整的型別提示，並通過mypy靜態型別檢查器驗證。

### 命名規範統一標準

變數和函數採用camelCase命名法，常數採用UPPER_SNAKE_CASE格式，類別採用PascalCase命名法，檔案名稱採用kebab-case格式。命名必須具有描述性，避免使用縮寫和不明確的術語，確保程式碼的自我記錄特性。

### 複雜度控制機制

函數的循環複雜度不得超過10，認知複雜度必須保持在15以下。單一函數的行數限制為50行，單一類別的行數限制為300行。超出限制的程式碼必須進行重構，將大型函數分解為多個小型、單一職責的函數。

## 錯誤處理最佳實踐

### 早期返回模式

函數開頭必須使用guard clauses進行輸入驗證和錯誤條件檢查，實現早期返回模式。這種方法可以避免深層巢狀的條件語句，提高程式碼的可讀性和維護性。

### 具體錯誤型別

所有錯誤處理必須使用具體的錯誤型別，而非通用的Exception類型。每個錯誤類型應該包含詳細的錯誤資訊和上下文，以便於問題診斷和修復。

## 效能考量準則

### 演算法效率要求

避免在迴圈內執行昂貴的操作，例如資料庫查詢、網路請求或複雜的計算。選擇適當的資料結構以優化查找、插入和刪除操作的時間複雜度。

### 快取策略實施

為頻繁存取的資料實作適當的快取機制，包括記憶體快取、分散式快取或瀏覽器快取。快取策略必須考慮資料一致性和快取失效機制。

## 安全性基本要求

### 輸入驗證機制

所有外部輸入必須經過嚴格的驗證和淨化處理，包括使用者輸入、API參數和檔案上傳。實施白名單驗證策略，明確定義允許的輸入格式和範圍。

### 敏感資訊保護

嚴禁在程式碼中硬編碼任何敏感資訊，包括API金鑰、資料庫連接字串、加密金鑰和第三方服務認證資訊。所有敏感資訊必須透過環境變數或安全的配置管理系統提供。

## 測試覆蓋要求

### 覆蓋率門檻

所有新增程式碼的測試覆蓋率必須達到85%以上，現有程式碼的整體覆蓋率必須維持在80%以上。關鍵業務邏輯的覆蓋率必須達到90%以上。

### 測試品質標準

測試必須具備獨立性、可重複性和確定性。每個測試應該專注於單一行為的驗證，具有清晰的測試名稱和適當的斷言。測試程式碼的維護性應該與生產程式碼相同。

## 文檔化要求

### 程式碼註解標準

複雜的業務邏輯、演算法實作和非顯而易見的技術決策必須提供清晰的註解說明。註解應該解釋程式碼的目的和原因，而非簡單重述程式碼的操作。

### API文檔完整性

所有公開的API端點、函數和類別必須提供完整的文檔，包括參數說明、返回值格式、可能的錯誤情況和使用範例。

## 版本控制規範

### 提交訊息格式

採用Conventional Commits格式撰寫提交訊息，包含類型、範圍和描述。提交類型包括feat（新功能）、fix（錯誤修復）、docs（文檔更新）、style（格式調整）、refactor（重構）、test（測試）和chore（維護任務）。

### 提交顆粒度

每個提交應該代表一個邏輯上完整的變更，避免將無關的變更混合在同一個提交中。提交描述必須清楚說明變更的目的和影響範圍。

## 強制禁止事項

以下行為被明確禁止且將導致程式碼審查失敗：在生產程式碼中使用console.log或類似的調試語句；提交包含未解決的TODO或FIXME註解的程式碼；略過自動化測試或程式碼品質檢查；使用已棄用的API或函式庫而未制定遷移計劃。

## 合規性檢查

本規範的遵循情況將透過自動化工具進行持續監控，包括靜態程式碼分析、測試覆蓋率檢查和安全性掃描。不符合規範的程式碼將無法通過品質閘門，必須修正後才能合併到主分支。

---

此規範代表開發品質的基本要求，旨在建立一致的程式碼標準並減少長期維護成本。所有開發團隊成員都有責任確保其程式碼符合這些標準。
